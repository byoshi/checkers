package com.example.checkers;

import java.util.ArrayList;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;

public class ImageAdapter extends BaseAdapter {
	public ImageAdapter(Context c) {
		populatePieceLocations(1, 8, 7, blackPieceLocations);
		populatePieceLocations(40, 48, 9, redPieceLocations);
		populateRedSquareLocations();
		populateBrownSquareLocations();
		populateEdgeBrownSquareLocations();
		mContext = c;
	}

	public int getCount() {
		return boardSize;
	}

	public Object getItem(int position) {
		return null;
	}

	public long getItemId(int position) {
		return 0;
	}

	// Generate squares on the board
	public View getView(int position, View convertView, ViewGroup parent) {
		ImageView imageView;
		if (gridView == null) {
			gridView = (GridView) parent;
		}
		if (convertView == null) {
			imageView = new ImageView(mContext);
			imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
			imageView.setPadding(0, 0, 0, 0);
			if (brownSquareLocations.contains(position)) {
				imageView.setImageResource(checkersIds[0]);
				checkersBoard.add(SquareStatus.brownSquare);
			} else if (redSquareLocations.contains(position)) {
				imageView.setImageResource(checkersIds[1]);
				checkersBoard.add(SquareStatus.redSquare);
			} else if (blackPieceLocations.contains(position)) {
				imageView.setImageResource(checkersIds[2]);
				checkersBoard.add(SquareStatus.blackPiece);
			} else if (redPieceLocations.contains(position)) {
				imageView.setImageResource(checkersIds[3]);
				checkersBoard.add(SquareStatus.redPiece);
			}
		} else {
			imageView = (ImageView) convertView;
		}

		return imageView;
	}

	public SquareStatus getSquareStatus(int position) {
		return checkersBoard.get(position);
	}

	public void highlightSquare(View v, int position, SquareStatus curStatus) {
		ImageView imageView = (ImageView) v;
		if (curStatus == SquareStatus.blackPiece && curPlayer == Player.Player2) {
			imageView.setImageResource(checkersIds[4]);
			checkersBoard.set(position, SquareStatus.blackPieceHighlight);
		} else if (curStatus == SquareStatus.redPiece
				&& curPlayer == Player.Player1) {
			imageView.setImageResource(checkersIds[5]);
			checkersBoard.set(position, SquareStatus.redPieceHighlight);
		}
	}

	public boolean Move(int position, TextView currentPlayerText, TextView gameState) {
		SquareStatus viewStatus = checkersBoard.get(position);
		boolean success = false;
		boolean jumped = false;

		// If trying to move to an occupied square
		if (viewStatus == SquareStatus.redPiece
				|| viewStatus == SquareStatus.blackPiece
				|| !containsHighlight()) {
			unhighlightSquare();
			return success;
		}

		if (curPlayer == Player.Player1) {
			if (rightEdgeBrownSquareLocations.contains(position)) { //If trying to move to right edge
				if (getSquareStatus(position + move1) == SquareStatus.redPieceHighlight) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move1, 0, SquareStatus.brownSquare);
					success = true;
				} else if (getSquareStatus(position + jump1) == SquareStatus.redPieceHighlight
						&& getSquareStatus(position + move1) == SquareStatus.blackPiece) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move1, 0, SquareStatus.brownSquare);
					setSquareImage(position + jump1, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			} else if (leftEdgeBrownSquareLocations.contains(position)) { //If trying to move to left edge
				if ((position + move2) < boardSize && getSquareStatus(position + move2) == SquareStatus.redPieceHighlight) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move2, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position + jump2) < boardSize && (position + move2) < boardSize && getSquareStatus(position + jump2) == SquareStatus.redPieceHighlight
						&& getSquareStatus(position + move2) == SquareStatus.blackPiece) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move2, 0, SquareStatus.brownSquare);
					setSquareImage(position + jump2, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			} else { //If trying to move to middle board
				if ((position + move1) < boardSize && getSquareStatus(position + move1) == SquareStatus.redPieceHighlight) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move1, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position + move2) < boardSize && getSquareStatus(position + move2) == SquareStatus.redPieceHighlight) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move2, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position + jump1) < boardSize && (position + move1) < boardSize && getSquareStatus(position + jump1) == SquareStatus.redPieceHighlight
						&& getSquareStatus(position + move1) == SquareStatus.blackPiece) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move1, 0, SquareStatus.brownSquare);
					setSquareImage(position + jump1, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				} else if ((position + jump2) < boardSize && (position + move2) < boardSize && getSquareStatus(position + jump2) == SquareStatus.redPieceHighlight
						&& getSquareStatus(position + move2) == SquareStatus.blackPiece) {
					setSquareImage(position, 3, SquareStatus.redPiece);
					setSquareImage(position + move2, 0, SquareStatus.brownSquare);
					setSquareImage(position + jump2, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			}
			if (success) {
				currentPlayerText.setText(R.string.blackmove);
				curPlayer = Player.Player2;
			}
			if (jumped) {
				numBlackPiecesRemaining--;
			}
		} else {
			if (rightEdgeBrownSquareLocations.contains(position)) { //If trying to move to right edge
				if (getSquareStatus(position - move2) == SquareStatus.blackPieceHighlight) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move2, 0, SquareStatus.brownSquare);
					success = true;
				} else if (getSquareStatus(position - jump2) == SquareStatus.blackPieceHighlight
						&& getSquareStatus(position - move2) == SquareStatus.redPiece) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move2, 0, SquareStatus.brownSquare);
					setSquareImage(position - jump2, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			} else if (leftEdgeBrownSquareLocations.contains(position)) { //If trying to move to left edge
				if ((position - move1) > 0 && getSquareStatus(position - move1) == SquareStatus.blackPieceHighlight) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move1, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position - jump1) > 0 && (position - move1) > 0 && getSquareStatus(position - jump1) == SquareStatus.blackPieceHighlight
						&& getSquareStatus(position - move1) == SquareStatus.redPiece) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move1, 0, SquareStatus.brownSquare);
					setSquareImage(position - jump1, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			} else { //If trying to move to middle board
				if ((position - move1) > 0 && getSquareStatus(position - move1) == SquareStatus.blackPieceHighlight) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move1, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position - move2) > 0 && getSquareStatus(position - move2) == SquareStatus.blackPieceHighlight) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move2, 0, SquareStatus.brownSquare);
					success = true;
				} else if ((position - jump1) > 0 && (position - move1) > 0 && getSquareStatus(position - jump1) == SquareStatus.blackPieceHighlight
						&& getSquareStatus(position - move1) == SquareStatus.redPiece) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move1, 0, SquareStatus.brownSquare);
					setSquareImage(position - jump1, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				} else if ((position - jump2) > 0 && (position - move2) > 0 && getSquareStatus(position - jump2) == SquareStatus.blackPieceHighlight
						&& getSquareStatus(position - move2) == SquareStatus.redPiece) {
					setSquareImage(position, 2, SquareStatus.blackPiece);
					setSquareImage(position - move2, 0, SquareStatus.brownSquare);
					setSquareImage(position - jump2, 0, SquareStatus.brownSquare);
					success = true;
					jumped = true;
				}
			}
			if (success) {
				currentPlayerText.setText(R.string.redmove);
				curPlayer = Player.Player1;
			}
			if (jumped) {
				numRedPiecesRemaining--;
			}
		}
		unhighlightSquare();
		if (numRedPiecesRemaining == 0 || numBlackPiecesRemaining == 0) {
			gameOver(gameState);
		}
		
		updateGameState(gameState);
		
		return success;
	}

	// Private methods
	private void setSquareImage(int position, int imageIndex, SquareStatus status) {
		ImageView imageView = (ImageView) gridView.getChildAt(position);
		imageView.setImageResource(checkersIds[imageIndex]);
		checkersBoard.set(position, status);
	}

	private void populatePieceLocations(int startingSquare, int endSquare,
			int middleRowAdd, ArrayList<Integer> pieceArray) {
		for (int i = startingSquare; i < endSquare; i += 2) {
			pieceArray.add(i);
			pieceArray.add(i + middleRowAdd);
			pieceArray.add(i + 16);
		}
	}

	private void populateRedSquareLocations() {
		for (int i = 0; i < 8; i += 2) {
			redSquareLocations.add(i);
			redSquareLocations.add(i + 9);
			redSquareLocations.add(i + 16);
			redSquareLocations.add(i + 25);
			redSquareLocations.add(i + 32);
			redSquareLocations.add(i + 41);
			redSquareLocations.add(i + 48);
			redSquareLocations.add(i + 57);
		}
	}

	private void populateBrownSquareLocations() {
		for (int i = 24; i < 32; i += 2) {
			brownSquareLocations.add(i);
			brownSquareLocations.add(i + 9);
		}
	}

	private void populateEdgeBrownSquareLocations() {
		for (int i = 7; i < 56; i += 16) {
			rightEdgeBrownSquareLocations.add(i);
			leftEdgeBrownSquareLocations.add(i + 1);
		}
	}

	private void unhighlightSquare() {
		for (int i = 0; i < boardSize; ++i) {
			if (getSquareStatus(i) == SquareStatus.blackPieceHighlight) {
				checkersBoard.set(i, SquareStatus.blackPiece);
				((ImageView) gridView.getChildAt(i))
						.setImageResource(checkersIds[2]);
				return;
			} else if (getSquareStatus(i) == SquareStatus.redPieceHighlight) {
				checkersBoard.set(i, SquareStatus.redPiece);
				((ImageView) gridView.getChildAt(i))
						.setImageResource(checkersIds[3]);
				return;
			}
		}
	}

	private boolean containsHighlight() {
		for (int i = 0; i < boardSize; ++i) {
			if (getSquareStatus(i) == SquareStatus.blackPieceHighlight
					|| getSquareStatus(i) == SquareStatus.redPieceHighlight) {
				return true;
			}
		}
		return false;
	}
	
	private void updateGameState(TextView gameState) {
		if (numRedPiecesRemaining > numBlackPiecesRemaining) {
			gameState.setText(R.string.redwinning);
		} else if (numBlackPiecesRemaining > numRedPiecesRemaining) {
			gameState.setText(R.string.blackwinning);
		} else {
			gameState.setText(R.string.tie);
		}
	}
	
	private void gameOver(TextView gameState) {
		if (numRedPiecesRemaining > 0) {
			gameState.setText(R.string.gameoverred);
		} else {
			gameState.setText(R.string.gameoverblack);	
		}
	}

	// Private members
	private int boardSize = 64;
	private int move1 = 7;
	private int move2 = 9;
	private int jump1 = 14;
	private int jump2 = 18;
	private int numBlackPiecesRemaining = 12;
	private int numRedPiecesRemaining = 12;
	private ArrayList<Integer> blackPieceLocations = new ArrayList<Integer>();
	private ArrayList<Integer> redPieceLocations = new ArrayList<Integer>();
	private ArrayList<Integer> redSquareLocations = new ArrayList<Integer>();
	private ArrayList<Integer> brownSquareLocations = new ArrayList<Integer>();
	private ArrayList<Integer> leftEdgeBrownSquareLocations = new ArrayList<Integer>();
	private ArrayList<Integer> rightEdgeBrownSquareLocations = new ArrayList<Integer>();
	private Context mContext;
	private GridView gridView = null;
	private Player curPlayer = Player.Player1;

	// Checkers images
	private Integer[] checkersIds = { R.drawable.brownsquare,
			R.drawable.redsquare, R.drawable.brownsquareblackpiece,
			R.drawable.brownsquareredpiece,
			R.drawable.brownsquareblackpiecehighlight,
			R.drawable.brownsquareredpiecehighlight };

	private ArrayList<SquareStatus> checkersBoard = new ArrayList<SquareStatus>();

	enum SquareStatus {
		redPiece, blackPiece, redSquare, brownSquare, blackPieceHighlight, redPieceHighlight
	};

	enum Player {
		Player1, Player2
	};
}